4386별자리만들기 

import java.io.*;
import java.util.*;
class Main {
    public static int[] parent;
    public static class line implements Comparable<line>{
        int a; 
        int b;
        double distance;
        public line( int a, int b, double distance){
            this.a =a;
            this.b =b;
            this.distance = distance;
        }
        @Override
        public int compareTo(line l1) {
            if(this.distance > l1.distance){
                return 1;
            }else return -1;
        }
    }
    public static int find(int x) { 
        if (x == parent[x]) 
        return x; 
        return parent[x] = find(parent[x]);
     } 
     
     public static void merge(int a, int b) { 
         a = find(a); 
         b = find(b); 
         if (a < b) parent[b] = a;
        else parent[a] = b; 
    }
        

    public static void spanning(ArrayList<line> pq){
        for(int i=0; i<pq.size(); i++){
            line now = pq.get(i);
            if (find(now.a) != find(now.b)) {
                result+= now.distance;
                merge(now.a , now.b);
            }
        }
    }

    public static double[][] map;
    public static double result =0 ;

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      int n = Integer.parseInt(br.readLine());

        parent = new int[n+1];
        for(int i=0; i<n; i++){
            parent[i] = i;
        }

        map = new double[n][2];
        for(int i=0; i<n; i++){
            String[] str = br.readLine().split(" ");
            double x = Double.parseDouble(str[0]);
            double y = Double.parseDouble(str[1]);
            map[i][0] = x;
            map[i][1] = y;
        }
        ArrayList<line> pq = new ArrayList<>();
        for(int i=0; i<n ; i++){
            for(int j=0; j<n; j++){
                if(i!=j){
                double dis = Math.pow(map[i][0] - map[j][0], 2) + Math.pow(map[i][1] - map[j][1], 2);
                dis = Math.sqrt(dis);
                pq.add(new line(i+1 , j+1, dis));
                }
            }
        }
        
        Collections.sort(pq);
        spanning(pq);
        
        System.out.println( String.format("%.2f", result));
   }
}