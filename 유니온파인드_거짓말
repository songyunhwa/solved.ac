import java.io.*;
import java.util.*;

class Main {
	public static int[] map;
	public static int[] visit;
	public static int findParent(int a){
		if(map[a] == a) return a;
		else return map[a] = findParent(map[a]); // 이것때문에 헤맸음. 자기 부모를 찾아서 현재에 넣는거임
	}
	public static void union(int a, int b){
		if(a==b){
			return;
		}
		map[a] = b; //작으면 부모?
	
	}
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		int n = Integer.parseInt(str[0]);
		int m = Integer.parseInt(str[1]);
		map = new int[n+1];
		visit=  new int[n+1];
		for(int i=0; i<=n; i++){
			map[i] = i;
		}
		ArrayList<ArrayList<Integer>> arr =new ArrayList<>();
		for(int i=0; i<=m; i++){
			arr.add(new ArrayList<>());
		}
		str = br.readLine().split(" ");
		int k = Integer.parseInt(str[0]);
		if(k==1)visit[Integer.parseInt(str[1])]= 1;
		if(k>1){
		for(int i=1; i<str.length; i++){
            visit[Integer.parseInt(str[i])] =1;
			if(i>=2)
			union(Integer.parseInt(str[1]), Integer.parseInt(str[i]));
		}
		}
		// 입력으로 들어왔던 것을 union 으로 묶어줘야함.
		for(int i=0; i<m ; i++){
			str = br.readLine().split(" ");
			for(int j=1; j<str.length-1; j++){
				union(Integer.parseInt(str[j]), Integer.parseInt(str[j+1]));
			}
			for(int j=1; j<str.length; j++){
				arr.get(i+1).add(Integer.parseInt(str[j]));
			}
		}
	
		// 같은 parent 를 가지고 있으면 visit 1 로 바꿈
		for(int i=1; i<=n ;i++){
			if(visit[i] == 1){
				int r = findParent(i);
				for(int j=1; j<=n ;j++){
					int r1 = findParent(j);
					if(r1 == r){
						visit[j] = 1;
					}
					}
				}
		}


		int answer=0;

		for(int i=1; i<=m ; i++){
			boolean t = true;
			for(int j=0; j<arr.get(i).size(); j++){
				if(visit[arr.get(i).get(j)] == 1){
					t= false;
					break;
				}
			}
			if(t){
				answer++;
			}
		}
		System.out.println(answer);
	}
}