import java.io.*;
import java.util.*;

class Main {
	public static class Node implements Comparable<Node>{
		int to;
		int cost;
		
		public Node(int to, int cost) {
			this.to = to;
			this.cost = cost;
		}
	
		@Override
		public int compareTo(Node o) {
			return this.cost - o.cost;
		}
	}
	public static int n =0;
	public static int b;
	public static int[][] dp;
	public static List<Node>[] arr;
	public static int answer = Integer.MAX_VALUE;
	public static void dik(int now, int sum){
		PriorityQueue<Node> pq =new PriorityQueue<>();
		pq.add(new Node(now, sum));

		while(!pq.isEmpty()) {
			Node next = pq.poll();
			if(next.to == b){
				answer = Math.min(answer , next.cost);
				return;
			}
			for(int i=0; i<arr[next.to].size(); i++){
				Node f = arr[next.to].get(i);
	
				if(dp[next.to][f.to] > next.cost + f.cost){
					dp[next.to][f.to] = next.cost + f.cost;
					pq.add(new Node(f.to, next.cost+f.cost));
				}
			}
		}

	}
	public static void main(String[] args) throws Exception {
	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n= Integer.parseInt(br.readLine());
		int k = Integer.parseInt(br.readLine());

		dp = new int[n+1][n+1];
		for(int i=0; i<=n; i++){
			Arrays.fill(dp[i] , Integer.MAX_VALUE);
		}
		arr =new ArrayList[n+1];

		for(int i=0; i<= n; i++){
			arr[i] = new ArrayList<Node>();
		}
		for(int i=0; i<k; i++){
			String[] str = br.readLine().split(" ");
			int from =Integer.parseInt(str[0]);
			int to =Integer.parseInt(str[1]);
			int cost = Integer.parseInt(str[2]);
			arr[from].add(new Node(to, cost));
		}
		String[] str = br.readLine().split(" ");
		int a = Integer.parseInt(str[0]);
		b = Integer.parseInt(str[1]);

		dik(a, 0);
		System.out.println(answer);

	}
}