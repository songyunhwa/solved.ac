import java.io.*;
import java.util.*;

class Main {
	public static int n;
	public static ArrayList<ArrayList<Node>> arr;
	public static int[] visit= new int[n+1];
	public static int answer =0;
	public static class Node{
		int n;
		int cnt;
		public Node(int n, int cnt){
			this.n = n;
			this.cnt = cnt;
		}
	
	}
	public static int target;
	public static void bfs(int start){
		Queue<Integer> q = new LinkedList<>();
		q.add(start);
		visit[start] = 0;
		while(!q.isEmpty()){
			int f = q.poll();

			for(int i=0; i<arr.get(f).size(); i++){
				Node node = arr.get(f).get(i);
				int next = node.n;
				if(visit[next] == 0){
					visit[next] = visit[f] + node.cnt;
					if(answer < visit[next]){
						answer = visit[next];
						target = next;
					}
					q.add(next);
				}
			}
		}
	}
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr =new ArrayList<>();
		visit= new int[n+1];
		for(int i=0; i<=n; i++){
			arr.add(new ArrayList<Node>());
		}
		String[] str;
		for(int i=0; i<n-1; i++){
			str = br.readLine().split(" ");
			int a = Integer.parseInt(str[0]);
			int b = Integer.parseInt(str[1]);
			int c = Integer.parseInt(str[2]);
			arr.get(a).add(new Node(b,c));
			arr.get(b).add(new Node(a,c));
		}
		// 임의의 정점에서 가장 먼 거리 (중간에 있는 무언가에서 가장 먼 거리는 끝이 됌.)
		bfs(1);
		// 임의의 정점에서 가장 먼거리에서 
		answer =0;
		visit= new int[n+1];
		bfs(target);
		System.out.println(answer);
	}
	
}