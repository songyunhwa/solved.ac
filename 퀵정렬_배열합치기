import java.io.*;
import java.util.*;

class Main {
	public static int[] arr;
	private static int partition(int left, int right) {
		
		int lo = left;
		int hi = right;
		int pivot = arr[right];		// 부분리스트의 오른쪽 요소를 피벗으로 설정
		
		// lo가 hi보다 작을 때 까지만 반복한다.
		while(lo < hi) {
			while(arr[lo] < pivot && lo < hi) {
				lo++;
			}
			
			while(arr[hi] >= pivot && lo < hi) {
				hi--;
			}

			swap(lo, hi);
		}
		

		swap(right, hi);
		
		// 두 요소가 교환되었다면 피벗이었던 요소는 hi에 위치하므로 hi를 반환한다.
		return hi;
	}
	
	private static void swap( int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	public static void quick(int start, int end){
		if (end - start <= 1) return; // 같거니 앞뒤면 끝낸다.

		int left = partition(start , end); // 바꾼 곳을 기준으로 quick

		quick(start, left-1);
		quick(left, end);
		
	}
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] str = br.readLine().split(" ");
		int n = Integer.parseInt(str[0]);
		int m = Integer.parseInt(str[1]);
		arr = new int[n+m];
		str =br.readLine().split(" ");
		for(int i=0; i<n; i++){
			arr[i] = Integer.parseInt(str[i]);
		}
		str = br.readLine().split(" ");
		for(int i=0; i<m; i++){
			arr[n+i] = Integer.parseInt(str[i]);
		}

		quick(0, n+m-1);

		for(int i=0; i<n+m; i++){
			System.out.print(arr[i] + " ");
		}

		
	}
}