import java.io.*;
import java.util.*;
class Main {
	public static int N;
	public static int[][] map;
	public static int ans =0; 
	public static void DFS(int i, int j , int dir){
			if(dir ==0) { //가로
				if(j+1<=N && map[i][j+1] == 0)
				DFS(i, j+1, 0);
			}
			if(dir==1) { //세로
				if(i+1 <=N && map[i+1][j] == 0)
				DFS(i+1, j, 1);
			}
			if(dir==2){ //대각선
				if(j+1 <= N  && map[i][j+1] == 0)
				DFS(i, j+1, 0);
				if(i+1 <= N  && map[i+1][j] == 0)
				DFS(i+1, j, 1);
			}
			if(i+1<=N && j+1 <=N && map[i][j + 1] == 0 && map[i + 1][j] == 0 && map[i+1][j+1] == 0)
				DFS(i+1 , j+1, 2);

			if(i==N && j==N){
				ans++;
				return;
			}
	}
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
 
        N = Integer.parseInt(br.readLine());
        map = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 1; j <= N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
 
        ans = 0;
        DFS(1, 2, 0);
		System.out.println(ans);
	}
}